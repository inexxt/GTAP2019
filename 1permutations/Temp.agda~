{-# OPTIONS --without-K #-}
{-# OPTIONS --allow-unsolved-metas #-}

module _ where
    open import General
    open import Level
    open _‚âà_

    variable
        Œπ ‚Ñì l : Level

    data Type : Set where
        ùüò   : Type
        ùüô   : Type
        _√ó_ : Type -> Type -> Type
        _+_ : Type -> Type -> Type

    data Member : Type -> Set where
        *     : Member ùüô
        _,_     : {X : Type} -> {Y : Type} -> Member X -> Member Y -> Member (X √ó Y)
        left    : {X : Type} -> {Y : Type} -> Member X -> Member (X + Y)
        right   : {X : Type} -> {Y : Type} -> Member Y -> Member (X + Y)

    intro-prod : {A B C : Type} -> ((Member C) -> (Member A)) -> ((Member C) -> (Member B)) -> (Member C) -> (Member (A √ó B))
    intro-prod f g c = (f c) , (g c)

    elim-prod : {A B : Type} ->
                {C : (Member (A √ó B)) -> Type} ->
                (f : (a : (Member A)) ->
                     (b : (Member B)) ->
                     (Member (C (a , b)))) ->
                (p : Member (A √ó B)) -> Member (C p)
    elim-prod f (a , b) = f a b


    √ófst : {X : Type} -> {Y : Type} -> Member (X √ó Y) -> Member X
    √ófst (a , b) = a

    √ósnd : {X : Type} -> {Y : Type} -> Member (X √ó Y) -> Member Y
    √ósnd (a , b) = b

    _‚àò_ : {A : Set ‚Ñì} -> {B : Set Œπ} -> {C : Set l} -> (B -> C) -> (A -> B) -> A -> C
    f ‚àò g = Œª x -> f (g x)

    data _==_ {‚Ñì} {A : Set ‚Ñì} (a : A) : (b : A) ->  Set ‚Ñì where
        idp : a == a

    J : {A : Set ‚Ñì} ->
        {a : A} ->
        (C : {x : A} -> (a == x) -> Set Œπ) ->
        (p : C {a} idp) ->
        {x : A} ->
        ((q : (a == x)) -> C q)
    J C p = Œª { idp ‚Üí p }

    ap : {A : Set ‚Ñì} -> {B : Set Œπ} -> {a b : A} -> (f : A -> B) -> (a == b) -> (f(a) == f(b))
    ap {a = a} f p = J (Œª {x} q ‚Üí f a == f x) idp p

    -- ap : {A : Set ‚Ñì} -> {B : Set Œπ} -> {a b : A} -> (f : A -> B) -> (a == b) -> (f(a) == f(b))
    -- ap f idp = idp

    coe : {A B : Set ‚Ñì} -> (A == B) -> A -> B
    coe idp a = a

    transport : {A : Set ‚Ñì} -> {a b : A} -> (C : A -> Set Œπ) -> (a == b) -> C(a) -> C(b)
    transport C = coe ‚àò (ap C)

    apd : {A : Set ‚Ñì} -> {C : A -> Set Œπ} -> {a b : A} -> (f : (a : A) -> C a) -> (p : (a == b)) -> (transport C p (f a)) == (f b)
    apd {C = C} f idp = idp

    -- p^-1 : Id

    data _‚â°_ : {T : Type} -> Member T -> Member T -> Set where
        refl‚ÇÅ : * ‚â° *
        refl‚Çì : {X : Type} -> {Y : Type}
                -> {p11 : Member X}
                -> {p21 : Member X}
                -> {p12 : Member Y}
                -> {p22 : Member Y}
                -> p11 ‚â° p21
                -> p12 ‚â° p22
                -> (p11 , p12) ‚â° (p21 , p22)
        refl‚Çó : {X : Type} -> {Y : Type}
                -> {x1 : Member X}
                -> {x2 : Member X}
                -> x1 ‚â° x2
                -> _‚â°_ {X + Y} (left x1) (left x2)
        refl·µ£ : {X : Type} -> {Y : Type}
                -> {y1 : Member Y}
                -> {y2 : Member Y}
                -> y1 ‚â° y2
                -> (right {X} y1) ‚â° (right {X} y2)
        -- ‚â°comp : {A : Type} -> {a b c : Member A} -> a ‚â° b -> b ‚â° c -> a ‚â° c -- TODO don't need that
        -- ‚â°app  : {A B : Type} -> {a b : Member A} -> (f : Member A -> Member B) -> a ‚â° b -> (f a) ‚â° (f b) -- TODO don't need that

    Id->√ó : {A B : Type} -> {a c : Member A} -> {b d : Member B} -> (a == c) -> (b == d) -> (a , b) == (c , d)
    Id->√ó idp idp = idp

    √ó->Id : {A B : Type} -> {p q : Member (A √ó B)} -> p == q -> (√ófst p) == (√ófst q)
    √ó->Id x = ap √ófst x

    √ó<->Id : {A B : Type} -> {p q : Member (A √ó B)} -> p == q -> (√ófst p) == (√ófst q)
    √ó<->Id x = ap √ófst x

    -- ‚â°-Id : {T : Type} -> {a b : Member T} -> (a ‚â° b) -> (a == b)
    -- ‚â°-Id refl‚ÇÅ = idp
    -- ‚â°-Id (refl‚Çì pa pb) = let x = (‚â°-Id pa)
    --                          y = (‚â°-Id pb) in
    --                      {!   !}
    -- ‚â°-Id (refl‚Çó p) = {!   !}
    -- ‚â°-Id (refl·µ£ p) = {!   !}
    -- ‚â°-Id (‚â°comp p p‚ÇÉ) = {!   !}
    -- ‚â°-Id (‚â°app f‚ÇÅ p) = {!   !}


    refl : {A : Type} -> (a : Member A) -> a ‚â° a
    refl * = refl‚ÇÅ
    refl (a , b) = refl‚Çì (refl a) (refl b)
    refl {A + B} (left a) = refl‚Çó {A} {B} (refl a)
    refl {A + B} (right b) = refl·µ£ {A} {B} (refl b)

    -- J‚â° : {A : Type} ->
    --     {a : Member A} ->
    --     (C : {x : Member A} -> (a ‚â° x) -> Type) ->
    --     (p : Member (C {a} (refl a))) ->
    --     {x : Member A} ->
    --     ((q : (a ‚â° x)) -> Member (C q))
    -- J‚â° {a = *} C p refl‚ÇÅ = p
    -- J‚â° {A = X √ó Y} {a1 , a2} C p (refl‚Çì q q‚ÇÅ) = J‚â° (Œª z ‚Üí C (refl‚Çì z q‚ÇÅ)) (J‚â° (Œª z ‚Üí C (refl‚Çì (refl a1) z)) p q‚ÇÅ) q
    -- J‚â° {A = X + Y} {a = left a} C p (refl‚Çó q) = J‚â° (Œª z ‚Üí C (refl‚Çó z)) p q
    -- J‚â° {A = X + Y} {a = right a} C p (refl·µ£ q) = J‚â° (Œª z ‚Üí C (refl·µ£ z)) p q

    J‚â° : {A : Type} ->
        {a : Member A} ->
        (C : {x : Member A} -> (a ‚â° x) -> Set ‚Ñì) ->
        (p : C {a} (refl a)) ->
        {x : Member A} ->
        ((q : (a ‚â° x)) -> C q)
    J‚â° {a = *} C p refl‚ÇÅ = p
    J‚â° {A = X √ó Y} {a1 , a2} C p (refl‚Çì q q‚ÇÅ) = ?
    J‚â° {A = X + Y} {a = left a} C p (refl‚Çó q) = J‚â° (Œª z ‚Üí C (refl‚Çó z)) p q
    J‚â° {A = X + Y} {a = right a} C p (refl·µ£ q) = J‚â° (Œª z ‚Üí C (refl·µ£ z)) p q
