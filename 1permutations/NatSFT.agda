{-# OPTIONS --without-K #-}
{-# OPTIONS --allow-unsolved-metas #-}

module NatSFT where
    --- Nat isomorphisms, only for manual testing, not to be used in the core

    open import FinTypes
    open import StandardFinTypes
    open import Agda.Builtin.Sigma
    open import Data.Product using (‚àÉ; proj‚ÇÅ; proj‚ÇÇ)
    open import Data.Nat using (‚Ñï ; _<_)
    open import General
    open import Relation.Binary.PropositionalEquality

    natToSft : (n : ‚Ñï) -> ‚àÉ (Œª t -> StandardFinType t)
    natToSft ‚Ñï.zero = ùüò , Fin0
    natToSft (‚Ñï.suc n) = let (t , p) = natToSft n
                       in  t + ùüô , FinS p

    sftToNat : {T : Type} -> StandardFinType T -> ‚Ñï
    sftToNat Fin0 = ‚Ñï.zero
    sftToNat (FinS n) = ‚Ñï.suc (sftToNat n)

    natToMemberSft : {T : Type} -> (n : ‚Ñï) -> (k : ‚Ñï) -> {p : k < n} -> Member ((natToSft n) .fst)
    natToMemberSft (‚Ñï.suc n) ‚Ñï.zero = (right *)
    natToMemberSft (‚Ñï.suc n) (‚Ñï.suc k) = left (natToMemberSft n k)

    ‚Ñï‚âàSFT : ‚Ñï ‚âà (‚àÉ (Œª T -> StandardFinType T))
    ‚Ñï‚âàSFT = Equiv natToSft (Œª x -> sftToNat (proj‚ÇÇ x)) (Œª a ‚Üí {!!}) Œª b ‚Üí {!!}
